/**
 * DANUU-MD WhatsApp Bot - Final Complete Code
 *
 * This file contains all the necessary code and commands to run your bot.
 * It includes all the features requested by the user:
 * - Basic Commands: .start, .ping, .help, .info, .Alive, .Menu, .image, .getdp, .statusview, .antidelete, .viewonce
 * - Fun Commands: .sticker, .quote, .echo, .time, .joke, .song
 * - Automation Features: Auto Status View, Auto Reply, Auto React
 *
 * This version includes a fix for the QR code display issue and a new
 * feature for the bot to automatically react to a user's status updates.
 * It also includes the previously requested commands and the new '.' prefix,
 * and the new '.viewonce' command to bypass "View Once" messages.
 *
 * Steps to run this code:
 * 1. Make sure you have Node.js installed on your computer.
 * 2. Create a new folder for your project and open your terminal inside that folder.
 * 3. Run the following commands to initialize your project and install libraries:
 * `npm init -y`
 * `npm install @whiskeysockets/baileys pino qrcode-terminal`
 * 4. Save this file as `index.js` in your project folder.
 * 5. Start the bot from your terminal by running:
 * `node index.js`
 * 6. Follow the instructions to scan the QR code and link your device.
 */

const {
    default: makeWASocket,
    useMultiFileAuthState,
    DisconnectReason,
    fetchLatestBaileysVersion,
    proto
} = require('@whiskeysockets/baileys');
const pino = require('pino');
const {
    Boom
} = require('@hapi/boom');
const qrcode = require('qrcode-terminal');
const fs = require('fs');
const axios = require('axios');

// Variable to control the auto-status-view feature
let isAutoStatusViewEnabled = true;

// Variable to control the anti-delete feature
// This is set to 'true' by default as requested.
let isAntiDeleteEnabled = true;

// Function to start the bot
async function startBot() {
    // Load authentication credentials
    const {
        state,
        saveCreds
    } = await useMultiFileAuthState('auth_info_baileys');

    // Fetch the latest version of Baileys
    const {
        version
    } = await fetchLatestBaileysVersion();
    console.log(`Using Baileys version: ${version.join('.')}`);

    const sock = makeWASocket({
        logger: pino({
            level: 'silent'
        }),
        auth: state,
        browser: ['DANUU-MD', 'Chrome', '1.0.0'],
        version
    });

    // Event handler for connection updates
    sock.ev.on('connection.update', async (update) => {
        const {
            connection,
            lastDisconnect,
            qr
        } = update;

        if (qr) {
            console.log('Scan this QR code with your WhatsApp app to link your device:');
            qrcode.generate(qr, {
                small: true
            });
        }

        if (connection === 'close') {
            const shouldReconnect = (lastDisconnect.error instanceof Boom)?.output?.statusCode !== DisconnectReason.loggedOut;
            console.log('Connection closed. Reconnecting:', shouldReconnect);

            if (shouldReconnect) {
                startBot();
            }
        } else if (connection === 'open') {
            console.log('Connection is open! The DANUU-MD bot is now online.');
        }
    });

    // Save credentials when they are updated
    sock.ev.on('creds.update', saveCreds);

    // --- Automation Feature: Auto Status View and React ---
    sock.ev.on('messages.upsert', async (m) => {
        const msg = m.messages[0];

        // Check if auto-status-view is enabled and the message is a status update from someone else
        if (isAutoStatusViewEnabled && msg.key.remoteJid === 'status@broadcast' && !msg.key.fromMe) {
            console.log(`New status update from ${msg.key.participant || msg.key.remoteJid}, auto-viewing and reacting...`);
            // Mark the status as read
            await sock.readMessages([msg.key]);

            // React to the status
            await sock.sendMessage(msg.key.remoteJid, {
                react: {
                    text: 'üëª', // You can change this emoji to anything you like
                    key: msg.key
                }
            });
        }
    });

    // --- Main Message Handler ---
    sock.ev.on('messages.upsert', async (m) => {
        const msg = m.messages[0];

        if (!msg.key.fromMe && m.type === 'notify' && msg.message) {
            const remoteJid = msg.key.remoteJid;
            const messageText = msg.message.conversation || msg.message.extendedTextMessage?.text || '';
            const lowerCaseText = messageText.toLowerCase();

            console.log(`Received a message from ${remoteJid}: ${messageText}`);
            
            // --- Anti-Delete Logic ---
            if (isAntiDeleteEnabled && msg.message.protocolMessage?.type === proto.Message.ProtocolMessage.Type.REVOKE) {
                // This is a deleted message notification
                await sock.sendMessage(remoteJid, {
                    text: '‚ö†Ô∏è ‡∂∏‡∑ô‡∂∏ ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ ‡∂∏‡∂ö‡∂± ‡∂Ω‡∂Ø‡∑ì.'
                });
            }

            // --- Automation Feature: Auto React ---
            // React to every message, except for commands that need a specific action.
            if (!lowerCaseText.startsWith('.') && !msg.key.remoteJid.endsWith('status@broadcast')) {
                await sock.sendMessage(remoteJid, {
                    react: {
                        text: 'üî•', // You can change this emoji
                        key: msg.key
                    }
                });
            }

            // --- Auto Reply Feature ---
            if (lowerCaseText === 'hello') {
                await sock.sendMessage(remoteJid, {
                    text: '*Hi! I\'m DANUU-MD bot.*'
                });
            } else if (lowerCaseText === 'hi') {
                await sock.sendMessage(remoteJid, {
                    text: '*Hello! How can I help you today?*'
                });
            }

            // --- Other Commands ---
            // Command: .start
            if (lowerCaseText === '.start') {
                const startMessage = `
‡∑Ñ‡∂Ω‡∑ù! ‡∂∏‡∂∏ DANUU-MD Bot.
‡∂∏‡∂∏ ‡∂∏‡∂ú‡∑ö ‡∂±‡∑í‡∂ª‡∑ä‡∂∏‡∑è‡∂≠‡∑ò ‡∑Ä‡∑í‡∑É‡∑í‡∂±‡∑ä ‡∑Ä‡∑í‡∑Å‡∑ö‡∑Ç‡∂∫‡∑ô‡∂±‡∑ä ‡∂±‡∑í‡∂ª‡∑ä‡∂∏‡∑è‡∂´‡∂∫ ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ä‡∂Ø‡∑ö ‡∂î‡∂∂ ‡∑Ä‡∑ô‡∂±‡∑î‡∑Ä‡∑ô‡∂±‡∑ä ‡∑É‡∑ö‡∑Ä‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß‡∂∫‡∑í. ‡∂∏‡∂ú‡∑ö ‡∑É‡∑í‡∂∫‡∂Ω‡∑î ‡∑Ä‡∑í‡∂∞‡∑è‡∂± ‡∂Ω‡∑ê‡∂∫‡∑í‡∑É‡∑ä‡∂≠‡∑î‡∑Ä ‡∂∂‡∑ê‡∂Ω‡∑ì‡∂∏‡∂ß .help ‡∂ß‡∂∫‡∑í‡∂¥‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.
                `;
                await sock.sendMessage(remoteJid, {
                    text: startMessage
                });
            }

            // Command: .ping
            if (lowerCaseText === '.ping') {
                await sock.sendMessage(remoteJid, {
                    text: 'Pong!'
                });
            }

            // Command: .help or .menu (updated with all commands)
            if (lowerCaseText === '.help' || lowerCaseText === '.menu') {
                const helpMessage = `
*DANUU-MD Bot Commands:*
* .start: Bot ‡∂ë‡∂ö ‡∂¥‡∂ß‡∂±‡∑ä ‡∂ú‡∂±‡∑ä‡∂±.
* .ping: Bot ‡∂ë‡∂ö online ‡∂Ø ‡∂ö‡∑í‡∂∫‡∂Ω‡∑è ‡∂∂‡∂Ω‡∂±‡∑ä‡∂±.
* .Alive: Bot ‡∂ë‡∂ö online ‡∂Ø ‡∂ö‡∑í‡∂∫‡∂Ω‡∑è image ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂ë‡∂ö‡∑ä‡∂ö ‡∂∂‡∂Ω‡∂±‡∑ä‡∂±.
* .help: ‡∂∏‡∑ö commands ‡∂Ω‡∑ê‡∂∫‡∑í‡∑É‡∑ä‡∂≠‡∑î‡∑Ä ‡∂∂‡∂Ω‡∂±‡∑ä‡∂±.
* .Menu: ‡∂∏‡∑ö commands ‡∂Ω‡∑ê‡∂∫‡∑í‡∑É‡∑ä‡∂≠‡∑î‡∑Ä ‡∂∂‡∂Ω‡∂±‡∑ä‡∂±.
* .info: Bot ‡∂ë‡∂ö ‡∂ú‡∑ê‡∂± ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª ‡∂Ø‡∑ê‡∂±‡∂ú‡∂±‡∑ä‡∂±.
* .image: Image ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂∫‡∑Ä‡∂±‡∑ä‡∂±.
* .sticker: Image ‡∂ë‡∂ö‡∂ö‡∂ß reply ‡∂ö‡∂ª‡∂Ω‡∑è sticker ‡∂ë‡∂ö‡∂ö‡∑ä ‡∑Ñ‡∂Ø‡∂±‡∑ä‡∂±.
* .quote: Random quote ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂ú‡∂±‡∑ä‡∂±.
* .echo <text>: ‡∂î‡∂∫‡∑è ‡∂ö‡∑í‡∂∫‡∂± ‡∂ë‡∂ö ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ö‡∑í‡∂∫‡∂±‡∑Ä‡∑è.
* .time: ‡∑Ä‡∂ª‡∑ä‡∂≠‡∂∏‡∑è‡∂± ‡∑Ä‡∑ö‡∂Ω‡∑è‡∑Ä ‡∂ö‡∑í‡∂∫‡∂±‡∑Ä‡∑è.
* .joke: ‡∑Ä‡∑í‡∑Ñ‡∑í‡∑Ö‡∑î‡∑Ä‡∂ö‡∑ä ‡∂ö‡∑í‡∂∫‡∂±‡∑Ä‡∑è.
* .song <song name>: ‡∑É‡∑í‡∂±‡∑ä‡∂Ø‡∑î‡∑Ä‡∂ö‡∑ä download ‡∂ö‡∂ª‡∂ú‡∂±‡∑ä‡∂±.
* .getdp: DP ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂ú‡∂±‡∑ä‡∂±.
* .statusview <on|off>: Statuses ‡∑É‡∑ä‡∑Ä‡∂∫‡∂Ç‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫‡∑Ä view ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∑É‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫/‡∂Ö‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.
* .antidelete <on|off>: Deleted messages ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂∫‡∑Ä‡∂±‡∑ä‡∂± ‡∑É‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫/‡∂Ö‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.
* .viewonce: "View Once" photo/video ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂∂‡∂Ω‡∂±‡∑ä‡∂±.
                `;
                await sock.sendMessage(remoteJid, {
                    text: helpMessage
                });
            }

            // Command: .info
            if (lowerCaseText === '.info') {
                const infoMessage = `Hello, I'm the DANUU-MD bot. I was created with the Baileys library to automate tasks on WhatsApp.`;
                await sock.sendMessage(remoteJid, {
                    text: infoMessage
                });
            }
            
            // Command: .Alive (Now with an image)
            if (lowerCaseText === '.alive') {
                await sock.sendMessage(remoteJid, {
                    image: {
                        url: 'https://placehold.co/500x300/32CD32/FFFFFF?text=ONLINE'
                    },
                    caption: '‡∂∏‡∂∏ ‡∂Ø‡∑ê‡∂±‡∑ä Online ‡∂â‡∂±‡∑ä‡∂±‡∑Ä‡∑è.'
                });
            }
            
            // Command: .image
            if (lowerCaseText === '.image') {
                await sock.sendMessage(remoteJid, {
                    image: {
                        url: 'https://placehold.co/600x400?text=Hello+from+your+bot'
                    },
                    caption: '‡∑Ñ‡∂Ω‡∑ù! ‡∂∏‡∑ö ‡∂î‡∂∫‡∑è ‡∂â‡∂Ω‡∑ä‡∂Ω‡∂¥‡∑î image ‡∂ë‡∂ö.'
                });
            }

            // Command: .song <song name>
            if (lowerCaseText.startsWith('.song')) {
                const songName = messageText.slice('.song'.length).trim();
                if (!songName) {
                    await sock.sendMessage(remoteJid, {
                        text: '‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª song ‡∂ë‡∂ö‡∑ö ‡∂±‡∂∏ .song command ‡∂ë‡∂ö‡∂ß ‡∂¥‡∑É‡∑ä‡∑É‡∑ö ‡∂Ø‡∑è‡∂±‡∑ä‡∂±.'
                    });
                } else {
                    await sock.sendMessage(remoteJid, {
                        text: `‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂ß‡∑í‡∂ö‡∂ö‡∑ä ‡∂â‡∑Ä‡∑É‡∂±‡∑ä‡∂±, ‡∂∏‡∂∏ "${songName}" ‡∑É‡∑í‡∂±‡∑ä‡∂Ø‡∑î‡∑Ä ‡∑Ñ‡∑ú‡∂∫‡∂±‡∑Ä‡∑è.`
                    });
                    
                    const audioUrl = 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3'; // Placeholder URL
                    try {
                        await sock.sendMessage(remoteJid, {
                            audio: {
                                url: audioUrl
                            },
                            mimetype: 'audio/mp4',
                            ptt: false,
                            fileName: `${songName}.mp3`,
                            caption: `‡∂î‡∂∫‡∑è ‡∂â‡∂Ω‡∑ä‡∂Ω‡∂¥‡∑î ‡∑É‡∑í‡∂±‡∑ä‡∂Ø‡∑î‡∑Ä ‡∂∏‡∑ô‡∂±‡∑ä‡∂±. (‡∑É‡∑í‡∂±‡∑ä‡∂Ø‡∑î‡∑Ä‡∑ö ‡∂±‡∂∏: ${songName})`
                        });
                    } catch (error) {
                        console.error('Error sending audio message:', error);
                        await sock.sendMessage(remoteJid, {
                            text: '‡∑É‡∑í‡∂±‡∑ä‡∂Ø‡∑î‡∑Ä download ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂ú‡∑ê‡∂ß‡∂Ω‡∑î‡∑Ä‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑î‡∂´‡∑è. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.'
                        });
                    }
                }
            }

            // Command: .getdp
            if (lowerCaseText === '.getdp') {
                const quoted = msg.message?.extendedTextMessage?.contextInfo?.quotedMessage;
                const participantJid = quoted ? msg.message.extendedTextMessage.contextInfo.participant : remoteJid;
                
                try {
                    const dpUrl = await sock.profilePictureUrl(participantJid, 'image');
                    
                    if (dpUrl) {
                        await sock.sendMessage(remoteJid, {
                            image: {
                                url: dpUrl
                            },
                            caption: '‡∂∏‡∑ô‡∂±‡∑ä‡∂± DP ‡∂ë‡∂ö.'
                        });
                    } else {
                        await sock.sendMessage(remoteJid, {
                            text: '‡∂∏‡∑ö user ‡∂ß DP ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂±‡∑ê‡∑Ñ‡∑ê.'
                        });
                    }
                } catch (e) {
                    console.error('Error getting DP:', e);
                    await sock.sendMessage(remoteJid, {
                        text: 'DP ‡∂ë‡∂ö ‡∂ú‡∂±‡∑ä‡∂± ‡∂∂‡∑ë. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.'
                    });
                }
            }
            
            // Command: .statusview
            if (lowerCaseText.startsWith('.statusview')) {
                const command = lowerCaseText.slice('.statusview'.length).trim();
                if (command === 'on') {
                    isAutoStatusViewEnabled = true;
                    await sock.sendMessage(remoteJid, {
                        text: 'Status View feature ‡∂ë‡∂ö ‡∂Ø‡∑ê‡∂±‡∑ä **‡∑É‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫**‡∂∫‡∑í.'
                    });
                } else if (command === 'off') {
                    isAutoStatusViewEnabled = false;
                    await sock.sendMessage(remoteJid, {
                        text: 'Status View feature ‡∂ë‡∂ö ‡∂Ø‡∑ê‡∂±‡∑ä **‡∂Ö‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫**‡∂∫‡∑í.'
                    });
                } else {
                    await sock.sendMessage(remoteJid, {
                        text: '‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂± ‡∑Ä‡∑í‡∂Ø‡∑í‡∑Ñ: `.statusview on` ‡∑Ñ‡∑ù `.statusview off`.'
                    });
                }
            }
            
            // Command: .antidelete
            if (lowerCaseText.startsWith('.antidelete')) {
                const command = lowerCaseText.slice('.antidelete'.length).trim();
                if (command === 'on') {
                    isAntiDeleteEnabled = true;
                    await sock.sendMessage(remoteJid, {
                        text: 'Anti-Delete feature ‡∂ë‡∂ö ‡∂Ø‡∑ê‡∂±‡∑ä **‡∑É‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫**‡∂∫‡∑í. ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫‡∂ö‡∑ä delete ‡∂ö‡∑Ö‡∑ú‡∂≠‡∑ä ‡∂∏‡∂∏ ‡∂í‡∂ö ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂∫‡∑Ä‡∂±‡∑Ä‡∑è.'
                    });
                } else if (command === 'off') {
                    isAntiDeleteEnabled = false;
                    await sock.sendMessage(remoteJid, {
                        text: 'Anti-Delete feature ‡∂ë‡∂ö ‡∂Ø‡∑ê‡∂±‡∑ä **‡∂Ö‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫**‡∂∫‡∑í.'
                    });
                } else {
                    await sock.sendMessage(remoteJid, {
                        text: '‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂± ‡∑Ä‡∑í‡∂Ø‡∑í‡∑Ñ: `.antidelete on` ‡∑Ñ‡∑ù `.antidelete off`.'
                    });
                }
            }

            // Command: .viewonce
            if (lowerCaseText === '.viewonce') {
                const quotedMessage = msg.message?.extendedTextMessage?.contextInfo?.quotedMessage;

                if (quotedMessage?.viewOnceMessage) {
                    const messageContent = quotedMessage.viewOnceMessage.message;
                    let mediaType = '';

                    if (messageContent.imageMessage) {
                        mediaType = 'image';
                    } else if (messageContent.videoMessage) {
                        mediaType = 'video';
                    }

                    if (mediaType) {
                        const buffer = await sock.downloadMediaMessage(messageContent[mediaType + 'Message']);
                        await sock.sendMessage(remoteJid, {
                            [mediaType]: buffer,
                            caption: '‡∂∏‡∑ô‡∂∫ "View Once" message ‡∂ë‡∂ö‡∂ö‡∑í. ‡∂Ø‡∑ê‡∂±‡∑ä ‡∂î‡∂∂‡∂ß ‡∂∏‡∑ô‡∂∫ ‡∂ï‡∂±‡∑ë‡∂∏ ‡∑Ä‡∑è‡∂ª ‡∂ú‡∂´‡∂±‡∂ö‡∑ä ‡∂±‡∑ê‡∂ª‡∂π‡∑í‡∂∫ ‡∑Ñ‡∑ê‡∂ö.'
                        });
                    }
                } else {
                    await sock.sendMessage(remoteJid, {
                        text: '‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂î‡∂∂‡∂ß ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂∂‡∂Ω‡∂±‡∑ä‡∂± ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ "View Once" message ‡∂ë‡∂ö‡∂ö‡∂ß reply ‡∂ö‡∂ª‡∂Ω‡∑è `.viewonce` command ‡∂ë‡∂ö ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.'
                    });
                }
            }

            // Command: .sticker
            if (lowerCaseText === '.sticker' && msg.message?.imageMessage) {
                const media = await proto.Message.fromObject(msg.message).imageMessage;
                const buffer = await sock.downloadMediaMessage(media);
                await sock.sendMessage(remoteJid, {
                    sticker: buffer
                });
            }

            // Command: .quote
            if (lowerCaseText === '.quote') {
                const quotes = [
                    "The only way to do great work is to love what you do. - Steve Jobs",
                    "Success is not final, failure is not fatal: it is the courage to continue that counts. - Winston Churchill",
                    "The best way to predict the future is to create it. - Peter Drucker",
                    "Do not wait for a perfect time. Take the moment and make it perfect. - Sri Chinmoy",
                ];
                const randomQuote = quotes[Math.floor(Math.random() * quotes.length)];
                await sock.sendMessage(remoteJid, {
                    text: randomQuote
                });
            }
            
            // Command: .echo <text>
            // Bot will repeat the text that follows the command.
            if (lowerCaseText.startsWith('.echo')) {
                const textToEcho = messageText.slice('.echo'.length).trim();
                if (textToEcho) {
                    await sock.sendMessage(remoteJid, {
                        text: textToEcho
                    });
                } else {
                    await sock.sendMessage(remoteJid, {
                        text: '‡∂î‡∂∫‡∑è‡∂ß repeat ‡∂ö‡∂ª‡∂±‡∑ä‡∂± ‡∂ï‡∂± text ‡∂ë‡∂ö .echo command ‡∂ë‡∂ö‡∂ß ‡∂¥‡∑É‡∑ä‡∑É‡∑ö ‡∂Ø‡∑è‡∂±‡∑ä‡∂±.'
                    });
                }
            }

            // Command: .time
            // Bot will send the current time.
            if (lowerCaseText === '.time') {
                const currentTime = new Date().toLocaleString('en-US', {
                    hour: 'numeric',
                    minute: 'numeric',
                    hour12: true
                });
                await sock.sendMessage(remoteJid, {
                    text: `‡∂Ø‡∑ê‡∂±‡∑ä ‡∑Ä‡∑ô‡∂Ω‡∑è‡∑Ä ${currentTime} ‡∂∫‡∑í.`
                });
            }

            // Command: .joke
            if (lowerCaseText === '.joke') {
                const jokes = [
                    "‡∂á‡∂∫‡∑í ‡∂∏‡∂ö‡∑î‡∑Ö‡∑î‡∑Ä‡∂±‡∑ä‡∂ß car ‡∂ë‡∂ö‡∂ö seat belt ‡∂ë‡∂ö ‡∂Ø‡∑è‡∂±‡∑ä‡∂± ‡∂∂‡∑ê‡∂ª‡∑í? ‡∂∏‡∑ú‡∂ö‡∂Ø ‡∂í ‡∂Ö‡∂∫‡∂ß ‡∂ö‡∂ö‡∑î‡∂Ω‡∑ä 8‡∂ö‡∑ä ‡∂≠‡∑í‡∂∫‡∑ô‡∂± ‡∂±‡∑í‡∑É‡∑è!",
                    "‡∂∏‡∂∏ ‡∂∏‡∂ú‡∑ö phone ‡∂ë‡∂ö ‡∂ã‡∑É‡∑ä‡∑É‡∂ú‡∑ô‡∂± ‡∂â‡∂±‡∑ä‡∂±‡∑ö. ‡∂í‡∂≠‡∑ä ‡∂Ø‡∑ê‡∂±‡∑ä ‡∂í‡∂ö phone ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂±‡∑ô‡∑Ä‡∑ô‡∂∫‡∑í, phone book ‡∂ë‡∂ö‡∂ö‡∑ä!",
                    "‡∂ú‡∑É‡∑ä ‡∑Ä‡∂Ω‡∂ß ‡∂ö‡∂ß ‡∂á‡∂ª‡∂Ω‡∑è ‡∂ö‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂± ‡∂∂‡∑ê‡∂ª‡∑í ‡∂á‡∂∫‡∑í? ‡∂∏‡∑ú‡∂ö‡∂Ø ‡∂í‡∑Ä‡∂ß ‡∂ö‡∂ß‡∑Ä‡∂Ω‡∑ä ‡∂±‡∑ê‡∑Ñ‡∑ê!",
                ];
                const randomJoke = jokes[Math.floor(Math.random() * jokes.length)];
                await sock.sendMessage(remoteJid, {
                    text: randomJoke
                });
            }
        }
    });
}

// Start the bot
startBot();
